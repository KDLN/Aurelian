// ---------- Generators & Datasource ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // pooled (pgbouncer) for app runtime
  directUrl = env("DIRECT_URL") // direct for migrations
}

// ---------- Enums ----------
enum ItemRarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

enum ListingStatus {
  active
  sold
  expired
  cancelled
}

enum JobStatus {
  queued
  running
  complete
  cancelled
  failed
}

enum MissionRisk {
  LOW
  MEDIUM
  HIGH
}

enum ContractStatus {
  draft
  active
  completed
  cancelled
  breached
}

// ---------- Users / Profiles ----------
// Supabase Auth user lives in auth.users. We mirror minimal profile here.
model User {
  id        String   @id @db.Uuid // same as auth.users.id
  email     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile       Profile?
  characters    Character[]
  wallets       Wallet[]
  listings      Listing[]
  contracts     Contract[]     @relation("ContractOwner")
  missions      Mission[]
  craftJobs     CraftJob[]
  routeBookings RouteBooking[]
  inventories      Inventory[] // opposite of Inventory.user
  ledger           LedgerTx[] // opposite of LedgerTx.user
  trailNodes       TrailNode[] // opposite of TrailNode.user
  trailSegs        TrailSeg[] // opposite of TrailSeg.user
  missionInstances MissionInstance[] // opposite of MissionInstance.user
}

model Profile {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @unique @db.Uuid
  display   String   @unique @default("Trader")
  avatar    Json? // store creator selections (colors, parts)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Character {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String      @db.Uuid
  name      String
  meta      Json? // cosmetic sliders, 2D sprite parts
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  inventory Inventory[]
}

model Wallet {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @unique @db.Uuid
  gold      Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ---------- Items / Inventory / Crafting ----------
model ItemDef {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key           String      @unique // e.g., "iron_ore"
  name          String
  rarity        ItemRarity  @default(COMMON)
  stack         Int         @default(9999)
  meta          Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  // opposites
  inventories   Inventory[]
  listings      Listing[]
  missions      Mission[]
  priceTicks    PriceTick[]
  contracts     Contract[]
  blueprintsOut Blueprint[] @relation("BlueprintOutput")
}

model Inventory {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  characterId String?  @db.Uuid
  userId      String?  @db.Uuid
  itemId      String   @db.Uuid
  qty         Int      @default(0)
  location    String   @default("warehouse") // warehouse, caravan, escrow
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  character Character? @relation(fields: [characterId], references: [id], onDelete: SetNull)
  user      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  item      ItemDef    @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([userId, itemId, location])
  @@index([userId])
  @@index([characterId])
  @@index([itemId])
}

model Blueprint {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key       String     @unique
  outputId  String     @db.Uuid
  inputs    Json // [{itemId, qty}, ...]
  timeMin   Int        @default(10) // minutes per batch
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  output    ItemDef    @relation("BlueprintOutput", fields: [outputId], references: [id], onDelete: Cascade)
  // opposites
  craftJobs CraftJob[]
}

model CraftJob {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @db.Uuid
  blueprintId String    @db.Uuid
  qty         Int
  status      JobStatus @default(queued)
  eta         DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  blueprint Blueprint @relation(fields: [blueprintId], references: [id], onDelete: Restrict)

  @@index([userId])
  @@index([status])
  @@index([eta])
}

// ---------- Quests / Missions (Scouts) ----------
model Mission {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String      @db.Uuid
  itemId    String      @db.Uuid
  qty       Int
  risk      MissionRisk @default(MEDIUM)
  eta       DateTime
  status    JobStatus   @default(running)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  item ItemDef @relation(fields: [itemId], references: [id], onDelete: Restrict)

  @@index([userId])
  @@index([status])
  @@index([eta])
}

// ---------- Auction House / Economy ----------
model Listing {
  id        String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sellerId  String        @db.Uuid
  itemId    String        @db.Uuid
  qty       Int
  price     Int // per unit in gold
  status    ListingStatus @default(active)
  createdAt DateTime      @default(now())
  closedAt  DateTime?

  seller User    @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  item   ItemDef @relation(fields: [itemId], references: [id], onDelete: Restrict)

  @@index([sellerId])
  @@index([itemId])
  @@index([status])
}

model LedgerTx {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String?  @db.Uuid
  amount    Int // positive=credit, negative=debit
  reason    String // e.g., "auction_sale", "toll", "craft_cost"
  meta      Json?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
}

model PriceTick {
  id     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  itemId String   @db.Uuid
  price  Int
  at     DateTime @default(now())
  item   ItemDef  @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@index([itemId, at])
}

// ---------- Contracts (bulk supply) ----------
model Contract {
  id        String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ownerId   String         @db.Uuid
  itemId    String         @db.Uuid
  qty       Int
  price     Int
  status    ContractStatus @default(active)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  owner User    @relation("ContractOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  item  ItemDef @relation(fields: [itemId], references: [id], onDelete: Restrict)

  @@index([ownerId])
  @@index([itemId])
  @@index([status])
}

// ---------- Paths / Trade Hubs ----------
model Hub {
  id        String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key       String         @unique
  name      String
  x         Int
  y         Int
  safe      Boolean        @default(true)
  createdAt DateTime       @default(now())
  // opposites
  linksA    Link[]         @relation("Link_a")
  linksB    Link[]         @relation("Link_b")
  routeFrom RouteBooking[] @relation("Route_from")
  routeTo   RouteBooking[] @relation("Route_to")
}

model Link {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  aId       String   @db.Uuid
  bId       String   @db.Uuid
  baseDist  Int
  baseRisk  Float
  toll      Int      @default(0)
  capacity  Int      @default(5)
  createdAt DateTime @default(now())

  a Hub @relation("Link_a", fields: [aId], references: [id], onDelete: Cascade)
  b Hub @relation("Link_b", fields: [bId], references: [id], onDelete: Cascade)

  @@index([aId])
  @@index([bId])
}

model TrailNode {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String     @db.Uuid
  x         Int
  y         Int
  createdAt DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  // opposites
  segsA     TrailSeg[] @relation("Seg_a")
  segsB     TrailSeg[] @relation("Seg_b")

  @@index([userId])
}

model TrailSeg {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  aId       String   @db.Uuid // TrailNode
  bId       String   @db.Uuid // TrailNode
  risk      Float    @default(0.3)
  createdAt DateTime @default(now())

  user User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  a    TrailNode @relation("Seg_a", fields: [aId], references: [id], onDelete: Cascade)
  b    TrailNode @relation("Seg_b", fields: [bId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model RouteBooking {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  fromHubId String?  @db.Uuid
  toHubId   String?  @db.Uuid
  summary   Json // legs, totals, eta, tolls
  tollPaid  Int      @default(0)
  createdAt DateTime @default(now())

  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromHub Hub? @relation("Route_from", fields: [fromHubId], references: [id])
  toHub   Hub? @relation("Route_to", fields: [toHubId], references: [id])

  @@index([userId, createdAt])
}

// ---------- Missions System ----------
model MissionDef {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  description  String
  fromHub      String   @default("Home")
  toHub        String   
  distance     Int      @default(100)
  baseDuration Int      @default(300) // seconds
  baseReward   Int      @default(50)  // gold
  riskLevel    MissionRisk @default(LOW)
  itemRewards  Json?    // array of {itemKey: string, qty: number}
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())

  instances MissionInstance[]
}

model MissionInstance {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @db.Uuid
  missionId   String   @db.Uuid
  status      String   @default("active") // active, completed, failed
  startTime   DateTime @default(now())
  endTime     DateTime
  actualReward Int?
  itemsReceived Json?   // actual items received
  createdAt   DateTime @default(now())
  completedAt DateTime?

  user    User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  mission MissionDef @relation(fields: [missionId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([endTime])
}
